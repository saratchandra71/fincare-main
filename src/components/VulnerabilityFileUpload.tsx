import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Upload, CheckCircle, XCircle, FileSpreadsheet } from 'lucide-react';
import { useVulnerability } from '@/contexts/VulnerabilityContext';
import { useToast } from '@/hooks/use-toast';
import * as XLSX from 'xlsx';

export function VulnerabilityFileUpload() {
  const [isUploading, setIsUploading] = useState(false);
  const { 
    isFileUploaded, 
    isValidated, 
    validationErrors, 
    setTimeSeriesData, 
    setCustomersData, 
    setDashboardSummary,
    setFileUploaded, 
    setValidated, 
    setValidationErrors,
    resetData 
  } = useVulnerability();
  const { toast } = useToast();

  const requiredTimeSeriesColumns = [
    'Customer ID', 'Month', 'Metric', 'Metric_Value', 
    'Vulnerability Marker', 'Trigger Month', 'Product Category', 'Product'
  ];

  const requiredCustomersColumns = [
    'Customer ID', 'Customer Name', 'Vulnerable', 'Vulnerability Score', 
    'Vulnerability Score Band', 'Vulnerability Marker', 'Product Category', 
    'Product', 'Trigger Month'
  ];

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.name !== 'synthetic_vulnerability_prototype_v2.xlsx') {
      toast({
        title: "Invalid File",
        description: "Please upload the file named 'synthetic_vulnerability_prototype_v2.xlsx'",
        variant: "destructive"
      });
      return;
    }

    setIsUploading(true);
    resetData();

    try {
      // Parse Excel file
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });

      // Get sheet names
      const sheetNames = workbook.SheetNames;
      console.log('Available sheets:', sheetNames);

      // Parse time_series sheet (usually the first sheet)
      const timeSeriesSheet = workbook.Sheets[sheetNames[0]];
      const timeSeriesData = XLSX.utils.sheet_to_json(timeSeriesSheet);

      // Parse customers sheet (usually the second sheet)  
      const customersSheet = workbook.Sheets[sheetNames[1]];
      const customersData = XLSX.utils.sheet_to_json(customersSheet);

      // Parse dashboard_summary sheet if it exists (usually third sheet)
      let dashboardSummary = null;
      if (sheetNames.length > 2) {
        const dashboardSheet = workbook.Sheets[sheetNames[2]];
        const dashboardData = XLSX.utils.sheet_to_json(dashboardSheet);
        if (dashboardData.length > 0) {
          // Convert array of objects to single object
          dashboardSummary = {};
          dashboardData.forEach((row: any) => {
            dashboardSummary[row.Metric] = row.Value;
          });
        }
      }

      console.log('Parsed data:', {
        timeSeriesCount: timeSeriesData.length,
        customersCount: customersData.length,
        dashboardSummary
      });

      // Validate time_series columns
      const timeSeriesErrors = [];
      if (timeSeriesData.length > 0) {
        const timeSeriesColumns = Object.keys(timeSeriesData[0]);
        for (const col of requiredTimeSeriesColumns) {
          if (!timeSeriesColumns.includes(col)) {
            timeSeriesErrors.push(`time_series: ${col}`);
          }
        }
      }

      // Validate customers columns  
      const customersErrors = [];
      if (customersData.length > 0) {
        const customersColumns = Object.keys(customersData[0]);
        for (const col of requiredCustomersColumns) {
          if (!customersColumns.includes(col)) {
            customersErrors.push(`customers: ${col}`);
          }
        }
      }

      if (timeSeriesErrors.length === 0 && customersErrors.length === 0) {
        setTimeSeriesData(timeSeriesData as any[]);
        setCustomersData(customersData as any[]);
        setDashboardSummary(dashboardSummary);
        setFileUploaded(true);
        setValidated(true);
        setValidationErrors([]);
        
        toast({
          title: "File Uploaded Successfully",
          description: "Vulnerability data has been loaded and validated.",
        });
      } else {
        const allErrors = [...timeSeriesErrors, ...customersErrors];
        setValidationErrors(allErrors);
        setValidated(false);
        
        toast({
          title: "Validation Failed",
          description: "Some required columns are missing.",
          variant: "destructive"
        });
      }

    } catch (error) {
      console.error('File parsing error:', error);
      toast({
        title: "Upload Failed",
        description: "An error occurred while processing the file.",
        variant: "destructive"
      });
    } finally {
      setIsUploading(false);
    }
  };

  const handleReUpload = () => {
    resetData();
    const fileInput = document.getElementById('vulnerability-file-input') as HTMLInputElement;
    if (fileInput) {
      fileInput.value = '';
      fileInput.click();
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileSpreadsheet className="h-5 w-5" />
            Upload Vulnerability Data
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-sm text-muted-foreground">
            Load the following datasets into memory:
            <ul className="mt-2 space-y-1 list-disc list-inside">
              <li><strong>time_series</strong> sheet - Customer vulnerability metrics over time</li>
              <li><strong>customers</strong> sheet - Customer vulnerability profiles</li>
            </ul>
          </div>

          {!isFileUploaded && (
            <div className="space-y-4">
              <div className="border-2 border-dashed border-border rounded-lg p-8 text-center">
                <Upload className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <div className="space-y-2">
                  <p className="text-lg font-medium">Upload Excel File</p>
                  <p className="text-sm text-muted-foreground">
                    Please upload: <code>synthetic_vulnerability_prototype_v2.xlsx</code>
                  </p>
                </div>
                <div className="mt-4">
                  <Input
                    id="vulnerability-file-input"
                    type="file"
                    accept=".xlsx,.xls"
                    onChange={handleFileUpload}
                    disabled={isUploading}
                    className="hidden"
                  />
                  <Button 
                    onClick={() => document.getElementById('vulnerability-file-input')?.click()}
                    disabled={isUploading}
                    size="lg"
                  >
                    {isUploading ? 'Processing...' : 'Choose File'}
                  </Button>
                </div>
              </div>
            </div>
          )}

          {isFileUploaded && isValidated && (
            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>
                <div className="flex items-center justify-between">
                  <span>Datasets have been loaded successfully.</span>
                  <Button variant="outline" size="sm" onClick={handleReUpload}>
                    Re-upload
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}

          {isFileUploaded && !isValidated && validationErrors.length > 0 && (
            <Alert variant="destructive">
              <XCircle className="h-4 w-4" />
              <AlertDescription>
                <div className="space-y-2">
                  <p className="font-medium">Validation failed. Missing columns:</p>
                  <div className="space-y-1">
                    {validationErrors.map((error, index) => (
                      <Badge key={index} variant="destructive" className="mr-2">
                        {error}
                      </Badge>
                    ))}
                  </div>
                  <Button variant="outline" size="sm" onClick={handleReUpload} className="mt-2">
                    Re-upload File
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}

          {isValidated && (
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <h4 className="font-medium mb-2">Time Series Columns</h4>
                <div className="space-y-1">
                  {requiredTimeSeriesColumns.map(col => (
                    <Badge key={col} variant="secondary" className="mr-1 mb-1">
                      {col}
                    </Badge>
                  ))}
                </div>
              </div>
              <div>
                <h4 className="font-medium mb-2">Customers Columns</h4>
                <div className="space-y-1">
                  {requiredCustomersColumns.map(col => (
                    <Badge key={col} variant="secondary" className="mr-1 mb-1">
                      {col}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}