
import React, { createContext, useContext, useState } from 'react'

export type TimeSeriesRow = Record<string, any>
export type CustomerData = Record<string, any>

interface VulnerabilityContextValue {
  isFileUploaded: boolean
  isValidated: boolean
  validationErrors: string[]
  timeSeriesData: TimeSeriesRow[]
  customersData: CustomerData[]
  dashboardSummary: Record<string, any> | null
  setTimeSeriesData: (rows: TimeSeriesRow[]) => void
  setCustomersData: (rows: CustomerData[]) => void
  setDashboardSummary: (summary: Record<string, any> | null) => void
  setFileUploaded: (val: boolean) => void
  setValidated: (val: boolean) => void
  setValidationErrors: (errs: string[]) => void
  resetData: () => void
}

const VulnerabilityContext = createContext<VulnerabilityContextValue | null>(null)

export function VulnerabilityProvider({ children }: { children: React.ReactNode }) {
  const [isFileUploaded, setFileUploaded] = useState(false)
  const [isValidated, setValidated] = useState(false)
  const [validationErrors, setValidationErrors] = useState<string[]>([])
  const [timeSeriesData, setTimeSeriesData] = useState<TimeSeriesRow[]>([])
  const [customersData, setCustomersData] = useState<CustomerData[]>([])
  const [dashboardSummary, setDashboardSummary] = useState<Record<string, any> | null>(null)

  const resetData = () => {
    setFileUploaded(false)
    setValidated(false)
    setValidationErrors([])
    setTimeSeriesData([])
    setCustomersData([])
    setDashboardSummary(null)
  }

  return (
    <VulnerabilityContext.Provider
      value={{
        isFileUploaded,
        isValidated,
        validationErrors,
        timeSeriesData,
        customersData,
        dashboardSummary,
        setTimeSeriesData,
        setCustomersData,
        setDashboardSummary,
        setFileUploaded,
        setValidated,
        setValidationErrors,
        resetData,
      }}
    >
      {children}
    </VulnerabilityContext.Provider>
  )
}

export function useVulnerability() {
  const ctx = useContext(VulnerabilityContext)
  if (!ctx) throw new Error('useVulnerability must be used within VulnerabilityProvider')
  return ctx
}
